name: template01
services:
  product-service:
    image: product-mart-api
    build:
      context: ./product-service
      dockerfile: Dockerfile.dev
    volumes:
      - ./product-service:/code  # Sync local development directory with the container
    depends_on:
        - postgres_product_db
        - postgres_test_db  # Test database for product-service
        - broker
    ports:
      - "8005:8000"  # Expose container port 8000 to host port 8000  
  inventory-service:
    image: inventory-mart-api
    build:
      context: ./inventory-service
      dockerfile: Dockerfile.dev
    volumes:
      - ./inventory-service:/code  # Sync local development directory with the container
    depends_on:
        - postgres_inventory_db
        - postgres_test_db  # Test database for inventory-service
        - broker
    ports:
      - "8006:8000"  # Expose container port 8000 to host port 8000 
  order-service:
    image: order-mart-api
    build:
      context: ./order-service
      dockerfile: Dockerfile.dev
    volumes:
      - ./order-service:/code  # Sync local development directory with the container
    depends_on:
        - postgres_order_db
        - postgres_test_db  # Test database for order-service
        - broker
    ports:
      - "8007:8000"  # Expose container port 8000 to host port 8007
  payment-service:
    image: payment-mart-api
    build:
      context: ./payment-service
      dockerfile: Dockerfile.dev
    volumes:
      - ./payment-service:/code  # Sync local development directory with the container
    depends_on:
        - postgres_payment_db
        - postgres_test_db  # Test database for payment-service
        - broker
    ports:
      - "8008:8000"  # Expose container port 8000 to host port 8008
  user-service:
    image: user-mart-api
    build:
      context: ./user-service
      dockerfile: Dockerfile.dev
    volumes:
      - ./user-service:/code # Sync local development directory with the container
    depends_on:
      - postgres_user_db
      - postgres_test_db  # Test database for user-service
      - broker
    ports:
      - "8009:8000"  # Expose container port 8000 to host port 8009
  notification-service:
    image: notification-mart-api
    build:
      context: ./notification-service
      dockerfile: Dockerfile.dev
    volumes:
      - ./notification-service:/code # Sync local development directory with the container
    depends_on:
      - postgres_notification_db
      - postgres_test_db  # Test database for notification-service
      - broker
    ports:
      - "8010:8000"  # Expose container port 8000 to host port 8009

  postgres_product_db:
    image: postgres:latest  # Use the official PostgreSQL image
    restart: always
    container_name: PostgresProductsCont
    environment:
        - POSTGRES_USER=usamaali
        - POSTGRES_PASSWORD=my_password
        - POSTGRES_DB=product_database
    ports:
        - '5461:5432'
    volumes:
        - postgres_product_db:/var/lib/postgresql/data
 
  postgres_inventory_db:
    image: postgres:latest  # Use the official PostgreSQL image
    restart: always
    container_name: PostgresInventoryCont
    environment:
        - POSTGRES_USER=usamaali
        - POSTGRES_PASSWORD=my_password
        - POSTGRES_DB=inventory_database
    ports:
        - '5462:5432'
    volumes:
        - postgres_inventory_db:/var/lib/postgresql/data
 
  postgres_order_db:
    image: postgres:latest  # Use the official PostgreSQL image
    restart: always
    container_name: PostgresOrderCont
    environment:
        - POSTGRES_USER=usamaali
        - POSTGRES_PASSWORD=my_password
        - POSTGRES_DB=order_database
    ports:
        - '5463:5432'
    volumes:
        - postgres_order_db:/var/lib/postgresql/data

  postgres_payment_db:
    image: postgres:latest # Use the official PostgreSQL image
    restart: always
    container_name: PostgresPaymentCont
    environment:
      - POSTGRES_USER=usamaali
      - POSTGRES_PASSWORD=my_password
      - POSTGRES_DB=payment_database
    ports:
      - '5464:5432'
    volumes:
      - postgres_payment_db:/var/lib/postgresql/data

  postgres_user_db:
    image: postgres:latest # Use the official PostgreSQL image
    restart: always
    container_name: PostgresUserCont
    environment:
      - POSTGRES_USER=usamaali
      - POSTGRES_PASSWORD=my_password
      - POSTGRES_DB=user_database
    ports:
      - '5465:5432'
    volumes:
      - postgres_user_db:/var/lib/postgresql/data
  postgres_notification_db:
    image: postgres:latest # Use the official PostgreSQL image
    restart: always
    container_name: PostgresNotificationCont
    environment:
      - POSTGRES_USER=usamaali
      - POSTGRES_PASSWORD=my_password
      - POSTGRES_DB=notification_database
    ports:
      - '5466:5432'
    volumes:
      - postgres_notification_db:/var/lib/postgresql/data
  # Test Databases
  postgres_test_db:
    image: postgres:latest
    restart: always
    container_name: PostgresTestCont
    environment:
        - POSTGRES_USER=usamaali
        - POSTGRES_PASSWORD=my_password
        - POSTGRES_DB=test_mydatabase
    ports:
        - '5470:5432'
    volumes:
        - postgres_test_db:/var/lib/postgresql/data

 
  broker:
    image: apache/kafka:3.7.0
    hostname: broker
    container_name: broker
    ports:
      - '9092:9092'
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT_HOST://localhost:9092,PLAINTEXT://broker:19092'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker:29093'
      KAFKA_LISTENERS: 'CONTROLLER://:29093,PLAINTEXT_HOST://:9092,PLAINTEXT://:19092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      CLUSTER_ID: '4L6g3nShT-eMCtK--X86sw'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: 'Local Kafka Cluster'
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: 'broker:19092'
      DYNAMIC_CONFIG_ENABLED: "true"
    depends_on:
      - broker
    # Schema Registry Service: We will use the Confluent Schema Registry image in Next Step
  schema-registry:
    image: confluentinc/cp-schema-registry:6.1.1
    depends_on:
      - broker
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: broker:19092
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081

volumes:
  postgres_product_db:
    driver: local
  postgres_inventory_db:
    driver: local
  postgres_order_db:
    driver: local
  postgres_payment_db:
    driver: local
  postgres_user_db:
    driver: local
  postgres_notification_db:
    driver: local
  postgres_test_db:
    driver: local

    
networks:
  default:
    driver: bridge

# networks:
#   mart-network: # Define the custom network